using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

namespace WCell.RealmServer.Network
{
    public unsafe class Asda2Cipher
    {
        /** Encryption key */
        public static int[] cryptKey = {
            0xDE, 0xE2, 0xAD, 0xF6, 0x92, 0x04, 0xCC, 0x4F, 0xA0, 0xD0, 0xCB, 0x66, 0x5F, 0xCC, 0x6B, 0x09,
            0x2F, 0x69, 0xAB, 0x46, 0xBD, 0x33, 0x34, 0x39, 0x82, 0x4B, 0xF3, 0x22, 0x8D, 0x17, 0x08, 0xBA,
            0x83, 0x38, 0xDF, 0xC8, 0xE4, 0xBC, 0x9C, 0xEF, 0x8F, 0x95, 0x89, 0x4A, 0xFA, 0x3B, 0xED, 0x70,
            0xFF, 0x78, 0x4D, 0xFF, 0x86, 0x88, 0x6C, 0xF1, 0x02, 0x62, 0xDC, 0xBF, 0xF5, 0x65, 0xC9, 0xB2,
            0x2B, 0xD2, 0x95, 0x54, 0x6E, 0xCD, 0x98, 0xB1, 0xE0, 0x85, 0xBB, 0x16, 0xBE, 0x91, 0xE5, 0xEE,
            0x78, 0xD8, 0xF4, 0xFC, 0xF9, 0x34, 0x0F, 0xE6, 0x3D, 0x53, 0xB3, 0xDD, 0xF1, 0xAD, 0x7F, 0x27,
            0x44, 0x5F, 0xA5, 0x42, 0x8E, 0xF4, 0xD2, 0x8B, 0xC2, 0x56, 0x1F, 0xA6, 0x1D, 0x77, 0x5D, 0x2F,
            0x8A, 0xB6, 0x69, 0xD9, 0x62, 0xE8, 0x70, 0xBD, 0xB5, 0x0F, 0x1A, 0x2C, 0xA6, 0x79, 0xF0, 0xAB,
            0x4C, 0xE3, 0x07, 0xD6, 0x28, 0xA2, 0xCF, 0xA8, 0x6F, 0x5C, 0xEC, 0xEC, 0xB1, 0x40, 0x0E, 0x94,
            0x18, 0x52, 0x46, 0xB5, 0xF7, 0x31, 0x75, 0xB4, 0x3A, 0x07, 0xEB, 0xFD, 0x71, 0x7E, 0x73, 0x00,
            0x40, 0xA5, 0x64, 0xAC, 0x3F, 0x71, 0xB2, 0xC0, 0xE3, 0x41, 0xC7, 0x3C, 0x1B, 0xFa, 0x53, 0x18,
            0x4B, 0x59, 0xAC, 0xF0, 0x5A, 0xA9, 0x30, 0xD7, 0x4A, 0x08, 0x51, 0xAA, 0xF8, 0x2E, 0xD9, 0xE7,
            0x3C, 0x44, 0xE1, 0x7D, 0xFD, 0x6F, 0x2A, 0x68, 0xBC, 0x4E, 0xDB, 0x97, 0x41, 0x19, 0xCD, 0xB7,
            0x85, 0x37, 0xAA, 0x8F, 0x04, 0x29, 0x9E, 0x9E, 0xAE, 0xB9, 0xA3, 0xB8, 0x11, 0x21, 0x90, 0xF3,
            0xC8, 0x7F, 0x65, 0xEA, 0xEA, 0x7C, 0xD4, 0xED, 0x67, 0x9B, 0x5E, 0x15, 0x23, 0xCA, 0x6D, 0x28,
            0x72, 0xB3, 0x39, 0xCB, 0x57, 0xDB, 0x06, 0x55, 0x13, 0x02, 0x29, 0x89, 0x25, 0xf9, 0x7D, 0x4D,
            0x9D, 0x81, 0x7E, 0x58, 0x88, 0x35, 0x63, 0x87, 0x94, 0x06, 0x52, 0x36, 0x68, 0x6C, 0xD3, 0xF8,
            0x80, 0xC2, 0x0B, 0xF5, 0x21, 0x86, 0x9A, 0x75, 0xD0, 0x6E, 0xEE, 0xD1, 0x43, 0x2A, 0x76, 0xBE,
            0x3E, 0xC9, 0xAF, 0x3F, 0x93, 0x30, 0xEF, 0xEB, 0xA1, 0x76, 0x17, 0x9C, 0x0A, 0xF2, 0x12, 0x24,
            0x2C, 0x0B, 0xC6, 0xCF, 0x8C, 0x1C, 0x97, 0x93, 0x45, 0x6B, 0xB7, 0x47, 0xB6, 0xF7, 0xDa, 0xFB,
            0x14, 0xDA, 0x36, 0x0A, 0xE9, 0x80, 0x2E, 0x26, 0xD6, 0xE4, 0x79, 0xA1, 0xD1, 0x25, 0x01, 0x7A,
            0x15, 0xAF, 0x47, 0x5B, 0x00, 0xE9, 0xD7, 0x3A, 0x49, 0x57, 0x8B, 0x74, 0xC3, 0x12, 0xA9, 0xD3,
            0xDD, 0x5D, 0x24, 0x90, 0x56, 0x03, 0xFC, 0x8D, 0xE7, 0xC4, 0xE6, 0x1D, 0xC5, 0x8A, 0xB4, 0x8C,
            0x3B, 0xA7, 0xBF, 0xE1, 0x20, 0x83, 0xC4, 0xA4, 0x09, 0x14, 0x10, 0xFE, 0x55, 0x48, 0x35, 0x99,
            0xA4, 0x6D, 0x48, 0x63, 0xFB, 0x82, 0x7C, 0x2D, 0x0C, 0xC6, 0x59, 0xB0, 0x19, 0x0D, 0x03, 0x50,
            0x0D, 0x1E, 0xA7, 0x67, 0x50, 0x73, 0xA8, 0xE0, 0x54, 0xC3, 0xC0, 0x1A, 0x4E, 0x64, 0x58, 0x8E,
            0x87, 0x20, 0xC1, 0x3D, 0x2D, 0xC7, 0xF2, 0x92, 0xE2, 0xAE, 0x32, 0x60, 0xD5, 0x01, 0x9F, 0xC5,
            0x22, 0xDE, 0xCE, 0x9D, 0xA2, 0x7B, 0xD8, 0xA3, 0x6A, 0x0C, 0x1E, 0x2B, 0x61, 0x0E, 0xB8, 0x1B,
            0x26, 0x84, 0x38, 0x1F, 0x77, 0xDC, 0x5B, 0x6A, 0xE8, 0x3E, 0x10, 0x91, 0x91, 0x45, 0x99, 0x5A,
            0x05, 0x96, 0xB0, 0xD5, 0xF6, 0x9E, 0x84, 0xDF, 0x9B, 0x51, 0x74, 0xE5, 0x37, 0x11, 0x42, 0x05,
            0xBA, 0x23, 0x5C, 0x49, 0x96, 0x9A, 0x1C, 0x98, 0x4F, 0xCE, 0x60, 0xD4, 0x27, 0x61, 0x81, 0x4C,
            0x31, 0x43, 0xFE, 0xBB, 0x66, 0x13, 0x16, 0x72, 0x7A, 0xA0, 0x7B, 0xC1, 0xB9, 0x5E, 0xCA, 0x32
    };

        /** Encryption key 2 */
        public static int[] cryptKey2 = {
            0xDE, 0x5F, 0xAD, 0xF6, 0x92, 0xE2, 0x71, 0x4F, 0xA0, 0x04, 0xD0, 0x09, 0xCB, 0x66, 0xB7, 0x6B,
            0x16, 0xC3, 0X47, 0x5B, 0x00, 0xAF, 0xD7, 0x3A, 0x49, 0xE9, 0x57, 0xD3, 0x8B, 0x74, 0x12, 0xA9,
            0x83, 0xFA, 0xDF, 0xC8, 0xE4, 0x38, 0x9C, 0xEF, 0x8F, 0xBC, 0x95, 0x70, 0x89, 0x4A, 0x3B, 0xED,
            0xFF, 0xF5, 0x4D, 0xFF, 0x86, 0x78, 0x6C, 0xF1, 0x02, 0x88, 0x62, 0xB2, 0xDC, 0xBF, 0x65, 0xC9,
            0x2B, 0xBE, 0x95, 0x54, 0x6E, 0xD2, 0x95, 0xB1, 0xE0, 0xCD, 0x85, 0xEE, 0xBB, 0x16, 0x91, 0xE5,
            0x2F, 0x8D, 0xAB, 0x46, 0xBD, 0x69, 0x34, 0x39, 0x82, 0x32, 0x4B, 0xBA, 0xF3, 0x22, 0x17, 0x08,
            0x44, 0x1D, 0xA5, 0x42, 0x8E, 0x5F, 0xD2, 0x8B, 0xC2, 0xF4, 0x56, 0x2F, 0x1F, 0xA6, 0x87, 0x5D,
            0x8A, 0xA6, 0x69, 0xD9, 0x62, 0xB6, 0x70, 0xBD, 0xB5, 0xE8, 0x0F, 0xAB, 0x1A, 0x2C, 0x79, 0xF0,
            0x4B, 0xF8, 0xAC, 0xF0, 0x5A, 0x59, 0x30, 0xD7, 0x4A, 0xA9, 0x08, 0xE7, 0x59, 0xAA, 0x2E, 0xD9,
            0x18, 0x71, 0x46, 0xB5, 0xF7, 0x52, 0x75, 0xB4, 0x3A, 0x31, 0x07, 0x00, 0xEB, 0xFD, 0x7E, 0x73,
            0x40, 0x1B, 0x64, 0xAC, 0x3F, 0xA5, 0xB2, 0xC0, 0xE3, 0x71, 0x41, 0x18, 0xC7, 0x3C, 0xFA, 0x53,
            0x2C, 0xB6, 0xC6, 0xCF, 0x8C, 0x0B, 0x97, 0x92, 0x45, 0x1C, 0x6B, 0xFB, 0xB7, 0x47, 0xF7, 0xDA,
            0x3C, 0x41, 0xE1, 0x7D, 0xFD, 0x44, 0x2A, 0x68, 0xBC, 0x6F, 0x4E, 0xB7, 0xDB, 0x97, 0x19, 0xCD,
            0x89, 0x11, 0xAA, 0x8F, 0x04, 0x37, 0x9E, 0x9F, 0xAE, 0x29, 0xB9, 0xF3, 0xA3, 0xB8, 0x21, 0x90,
            0xC8, 0x23, 0x65, 0xEA, 0xEA, 0x7F, 0xD4, 0xED, 0x67, 0x7C, 0x9B, 0x28, 0x5E, 0x15, 0xCA, 0x6D,
            0x72, 0x25, 0x39, 0xCB, 0x57, 0xB3, 0x06, 0x55, 0x13, 0xDB, 0x02, 0x4D, 0x29, 0x89, 0xF9, 0x7D,
            0x78, 0xF1, 0xF4, 0xFC, 0xF9, 0xD8, 0x0F, 0xE6, 0x3D, 0x34, 0x53, 0x27, 0xB3, 0xDD, 0xAD, 0x7F,
            0x80, 0x43, 0x0B, 0xF5, 0x21, 0xC2, 0x9A, 0x75, 0xD0, 0x86, 0x6E, 0xBE, 0xEE, 0xD1, 0x2A, 0x76,
            0x3E, 0x0A, 0xAF, 0x3F, 0x93, 0xC9, 0xEF, 0xEB, 0xA1, 0x30, 0x76, 0x24, 0x17, 0x9C, 0xF2, 0x12,
            0x4C, 0xB1, 0x07, 0xD6, 0x28, 0xE3, 0x5F, 0xA8, 0x6F, 0xA2, 0x5C, 0x94, 0xEC, 0xEC, 0x40, 0x0E,
            0x10, 0xD1, 0x36, 0x0A, 0xE9, 0xDA, 0x2E, 0x26, 0xD6, 0x80, 0xE4, 0x7A, 0x79, 0xA1, 0x25, 0x01,
            0x05, 0x37, 0xB0, 0xD5, 0xF6, 0x96, 0x84, 0xDF, 0x9B, 0x9E, 0x51, 0x05, 0x74, 0xE5, 0x11, 0x42,
            0xDD, 0xC5, 0x24, 0x90, 0x56, 0x5D, 0xFC, 0x8D, 0xE7, 0x03, 0xC4, 0x8C, 0xE6, 0x1D, 0x8A, 0xB4,
            0x3B, 0x55, 0xBF, 0xE1, 0x20, 0xA7, 0xC4, 0xA4, 0x09, 0x83, 0x14, 0x99, 0x15, 0xFE, 0x48, 0x35,
            0xA4, 0x19, 0x48, 0x63, 0xFB, 0x6D, 0x7C, 0x2D, 0x0C, 0x82, 0xC6, 0x50, 0x59, 0xB0, 0x0D, 0x03,
            0x0D, 0x4E, 0xA7, 0x67, 0x59, 0x1E, 0xA8, 0xE0, 0x54, 0x73, 0xC3, 0x8E, 0xC0, 0x1A, 0x64, 0x58,
            0x9D, 0x68, 0x7E, 0x58, 0x88, 0x81, 0x63, 0x87, 0x94, 0x35, 0x06, 0xF8, 0x52, 0x36, 0x6C, 0xD3,
            0x22, 0x61, 0xCE, 0x9D, 0xA2, 0xDE, 0xD8, 0xA3, 0x6A, 0x7B, 0x0C, 0x1B, 0x1E, 0x2B, 0x0E, 0xB8,
            0x26, 0x91, 0x38, 0x1F, 0x77, 0x84, 0x5B, 0x6A, 0xE8, 0xDC, 0x3E, 0x5A, 0x33, 0x10, 0x45, 0x99,
            0x87, 0xD5, 0xC1, 0x3D, 0x2D, 0x20, 0xF2, 0x92, 0xE2, 0xC7, 0xAE, 0xC5, 0x32, 0x60, 0x01, 0x9F,
            0xBA, 0x27, 0x5C, 0x49, 0x96, 0x23, 0x1C, 0x98, 0x4F, 0x9A, 0xCE, 0x4C, 0x60, 0xD4, 0x61, 0x81,
            0x31, 0x39, 0xFE, 0xBB, 0x66, 0x43, 0x16, 0x72, 0x7A, 0x13, 0xA0, 0x32, 0x7B, 0xC1, 0x2C, 0xAD

    };

        /**
	 * Hexdecimal character table
	 */
        private static char[] hex_table = {
            '0','1','2','3',
            '4','5','6','7',
            '8','9','A','B',
            'C','D','E','F'
        };

        /**
         * Converts byte array to hexdecimal string
         */

        public static String bytesToHex(byte[] bytes)
        {
            char[] hex = new char[bytes.Length * 2];

            for (int i = 0; i < bytes.Length; ++i)
            {
                hex[i * 2] += hex_table[(bytes[i] >> 4) & 0x0F];
                hex[i * 2 + 1] += hex_table[bytes[i] & 0x0F];
            }
            return new String(hex);
        }

        /**
    * Encrypts bytes with encryption key
    */
        public static byte[] crypt(byte[] bytes, int key)
        {
            for (int i = 0; i < bytes.Length; ++i)
            {

                // Arabian old
        //        bytes[i] = (byte)(cryptKey[2 * cryptKey[54]] ^ cryptKey[key * 2 + 1] ^ cryptKey[(255 - i % 256) * 2 + 1] ^ bytes[i] ^ 0x74);

                //Arabian NEW
          //          bytes[i] = (byte)(cryptKey2[2 * cryptKey2[247]] ^ cryptKey2[key * 2 + 1] ^ cryptKey[(255 - i % 256) * 2 + 1] ^ bytes[i] ^ 0x63);

                //English NEW
            //      bytes[i] = (byte)(cryptKey2[2 * cryptKey2[247]] ^ cryptKey2[key * 2 + 1] ^ cryptKey[(255 - i % 256) * 2 + 1] ^ bytes[i]);

                //Russian New
                bytes[i] = (byte)(cryptKey2[2 * cryptKey2[28]] ^ cryptKey2[key * 2 + 1] ^ cryptKey[(255 - i % 256) * 2 + 1] ^ bytes[i]);
            }
            return bytes;
        }


        /// <summary>
        /// This method accepts the packet buffer and the total length that will be decrypted in bytes. It then 
        /// decrypts the buffer using the algorithm defined in the function. It's used when receiving packets from 
        /// the client. The buffer is copied while being decrypted so that the original array is untouched.
        /// </summary>
        /// <param name="buffer">The buffer being decrypted.</param>
        /// <param name="length">The length being decrypted.</param>
        public byte[] Decrypt(byte[] buffer, int length, int offset = 0)
        {
            byte[] result = new byte[length];
            Array.Copy(buffer, result, length);
            return result;
            using (MemoryStream Stream = new MemoryStream(result))
            {
                using (BinaryReader stream = new BinaryReader(Stream))
                {

                    while ((stream.ReadByte() & 0xFF) != 0xFB) ;

                    // Converting from a little-endian to big-endian
                    int size_hi = stream.ReadByte() & 255;
                    int size_lo = stream.ReadByte() & 255;
                    int key = stream.ReadByte() & 255;

                    // Allocating memory for packet's data
                    byte[] bytes = new byte[size_lo * 256 + size_hi - 5];

                    // Reading packet's data into a buffer
                    stream.Read(bytes, 0, bytes.Length);
                    
                    // Encrypting packet's data
                    bytes = crypt(bytes, key);

                    return bytes;

                }
            }
        }

        /// <summary>
        /// This method accepts the packet buffer and the total length that will be decrypted in bytes. It then 
        /// decrypts the buffer using the algorithm defined in the function. It's used when receiving packets from 
        /// the client. The buffer is decrypted into the packet array.
        /// </summary>
        /// <param name="packet">The pointed packet receiving new data to.</param>
        /// <param name="buffer">The encrypted buffer from the client's socket.</param>
        /// <param name="length">The length to decrypt bytes for.</param>
        /// <param name="offset">The position to begin writing data to in the pointed packet</param>
        public byte[] Decrypt(byte[] packet, byte[] buffer, int length, int position)
        {
            Array.Copy(buffer, 0, packet, position, length);
            using (MemoryStream Stream = new MemoryStream(packet))
            {
                using (BinaryReader stream = new BinaryReader(Stream))
                {

                    // Reading packet's header
                    while ((stream.ReadByte() & 0xFF) != 0xFB) ;

                    // Converting from a little-endian to big-endian
                    int size_hi = stream.ReadByte() & 0xFF;
                    int size_lo = stream.ReadByte() & 0xFF;
                    int key = stream.ReadByte() & 0xFF;

                    // Allocating memory for packet's data
                    packet = new byte[size_lo * 256 + size_hi - 5];

                    // Reading packet's data into a buffer
                    stream.Read(packet, 0, packet.Length);

                    // Encrypting packet's data
                    packet = crypt(packet, key);

                    return packet;
                }
            }
        }

        public byte[] Encrypt(byte[] packet, int length)
        {
            byte[] data = new byte[packet.Length];
            Array.Copy(packet, data, data.Length);


            int size = data.Length + 5;
            var key = new Random().Next(256);
            data = crypt(data, key);
            var buffer = new System.IO.BinaryWriter(new System.IO.MemoryStream(new byte[size]));

            buffer.Write((byte)0xFB);
            buffer.Write((short)size);
            buffer.Write((byte)key);
            buffer.Write(data);
            buffer.Write((byte)0xFE);

            return (buffer.BaseStream as System.IO.MemoryStream).ToArray();
        }
    }
}
